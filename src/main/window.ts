import * as path from 'path';

import { BrowserWindow, shell } from 'electron';

import log from './log';
import { resolveHtmlPath } from './util';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
// declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const isDevelopment = process.env.NODE_ENV === 'development';

export const createWindow = (): void => {
	// Create the browser window.
	let mainWindow = new BrowserWindow({
		show: false,
		width: 1024,
		height: 728,
		icon: path.join(__dirname, '../../icons/icon.ico'),
		webPreferences: {
			preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
			sandbox: false, // required for preload script to work
			nodeIntegration: false, // prevent node integration for security reasons
			contextIsolation: true, // protect against prototype pollution
		},
	});

	if (isDevelopment) {
		mainWindow.webContents.openDevTools();
	}

	mainWindow.loadURL(resolveHtmlPath('index.html'));

	mainWindow.on('ready-to-show', () => {
		if (!mainWindow) {
			throw new Error('"mainWindow" is not defined');
		}
		if (process.env.START_MINIMIZED) {
			mainWindow.minimize();
		} else {
			mainWindow.show();
		}
	});

	mainWindow.on('closed', () => {
		mainWindow = null;
	});

	// Open urls in the user's browser
	mainWindow.webContents.setWindowOpenHandler((edata) => {
		shell.openExternal(edata.url);
		return { action: 'deny' };
	});

	// If page not found, go to index page
	// TODO - hack fix for reload when on a react-navigation route
	mainWindow.webContents.on('did-fail-load', async (err) => {
		log.error('did-fail-load');
		log.error(err);
		mainWindow.loadURL(resolveHtmlPath('index.html'));
	});

	// Prevent all navigation events that would lead away from index.html
	// mainWindow.webContents.on('will-navigate', (event, url) => {
	// 	// Parse the path from the URL
	// 	const path = new URL(url).pathname;

	// 	event.preventDefault(); // Prevent the actual navigation

	// 	// Now you can handle the path within your SPA
	// 	// For example, send it to your renderer process:
	// 	mainWindow?.webContents.send('navigate', path);
	// });
};
